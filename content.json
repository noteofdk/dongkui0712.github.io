{"meta":{"title":"在路上","subtitle":"仰望星空，脚踏实地！","description":"散卷凉盏伴携程，一蓑烟雨任平生","author":"DongKui","url":"http://dongkui.site"},"pages":[{"title":"","date":"2016-11-02T05:53:10.000Z","updated":"2016-10-16T16:49:30.000Z","comments":true,"path":"about/index.html","permalink":"http://dongkui.site/about/index.html","excerpt":"","text":"body { width: 45em; border: 1px solid #ddd; outline: 1300px solid #fff; margin: 16px auto; } body .markdown-body { padding: 30px; } @font-face { font-family: fontawesome-mini; src: url(data:font/woff;charset=utf-8;base64,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) format('woff'); } @font-face { font-family: octicons-anchor; src: url(data:font/woff;charset=utf-8;base64,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) format('woff'); } .markdown-body { font-family: sans-serif; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; color: #333333; overflow: hidden; font-family: \"Helvetica Neue\", Helvetica, \"Segoe UI\", Arial, freesans, sans-serif; font-size: 16px; line-height: 1.6; word-wrap: break-word; } .markdown-body a { background: transparent; } .markdown-body a:active, .markdown-body a:hover { outline: 0; } .markdown-body b, .markdown-body strong { font-weight: bold; } .markdown-body mark { background: #ff0; color: #000; font-style: italic; font-weight: bold; } .markdown-body sub, .markdown-body sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; } .markdown-body sup { top: -0.5em; } .markdown-body sub { bottom: -0.25em; } .markdown-body h1 { font-size: 2em; margin: 0.67em 0; } .markdown-body img { border: 0; } .markdown-body hr { -moz-box-sizing: content-box; box-sizing: content-box; height: 0; } .markdown-body pre { overflow: auto; } .markdown-body code, .markdown-body kbd, .markdown-body pre, .markdown-body samp { font-family: monospace, monospace; font-size: 1em; } .markdown-body input { color: inherit; font: inherit; margin: 0; } .markdown-body html input[disabled] { cursor: default; } .markdown-body input { line-height: normal; } .markdown-body input[type=\"checkbox\"] { box-sizing: border-box; padding: 0; } .markdown-body table { border-collapse: collapse; border-spacing: 0; } .markdown-body td, .markdown-body th { padding: 0; } .markdown-body .codehilitetable { border: 0; border-spacing: 0; } .markdown-body .codehilitetable tr { border: 0; } .markdown-body .codehilitetable pre, .markdown-body .codehilitetable div.codehilite { margin: 0; } .markdown-body .linenos, .markdown-body .code, .markdown-body .codehilitetable td { border: 0; padding: 0; } .markdown-body td:not(.linenos) .linenodiv { padding: 0 !important; } .markdown-body .code { width: 100%; } .markdown-body .linenos div pre, .markdown-body .linenodiv pre, .markdown-body .linenodiv { border: 0; -webkit-border-radius: 0; -moz-border-radius: 0; border-radius: 0; -webkit-border-top-left-radius: 3px; -webkit-border-bottom-left-radius: 3px; -moz-border-radius-topleft: 3px; -moz-border-radius-bottomleft: 3px; border-top-left-radius: 3px; border-bottom-left-radius: 3px; } .markdown-body .code div pre, .markdown-body .code div { border: 0; -webkit-border-radius: 0; -moz-border-radius: 0; border-radius: 0; -webkit-border-top-right-radius: 3px; -webkit-border-bottom-right-radius: 3px; -moz-border-radius-topright: 3px; -moz-border-radius-bottomright: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; } .markdown-body * { -moz-box-sizing: border-box; box-sizing: border-box; } .markdown-body input { font: 13px Helvetica, arial, freesans, clean, sans-serif, \"Segoe UI Emoji\", \"Segoe UI Symbol\"; line-height: 1.4; } .markdown-body a { color: #4183c4; text-decoration: none; } .markdown-body a:hover, .markdown-body a:focus, .markdown-body a:active { text-decoration: underline; } .markdown-body hr { height: 0; margin: 15px 0; overflow: hidden; background: transparent; border: 0; border-bottom: 1px solid #ddd; } .markdown-body hr:before, .markdown-body hr:after { display: table; content: \" \"; } .markdown-body hr:after { clear: both; } .markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6 { margin-top: 15px; margin-bottom: 15px; line-height: 1.1; } .markdown-body h1 { font-size: 30px; } .markdown-body h2 { font-size: 21px; } .markdown-body h3 { font-size: 16px; } .markdown-body h4 { font-size: 14px; } .markdown-body h5 { font-size: 12px; } .markdown-body h6 { font-size: 11px; } .markdown-body blockquote { margin: 0; } .markdown-body ul, .markdown-body ol { padding: 0; margin-top: 0; margin-bottom: 0; } .markdown-body ol ol, .markdown-body ul ol { list-style-type: lower-roman; } .markdown-body ul ul ol, .markdown-body ul ol ol, .markdown-body ol ul ol, .markdown-body ol ol ol { list-style-type: lower-alpha; } .markdown-body dd { margin-left: 0; } .markdown-body code, .markdown-body pre, .markdown-body samp { font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace; font-size: 12px; } .markdown-body pre { margin-top: 0; margin-bottom: 0; } .markdown-body kbd { background-color: #e7e7e7; background-image: -moz-linear-gradient(#fefefe, #e7e7e7); background-image: -webkit-linear-gradient(#fefefe, #e7e7e7); background-image: linear-gradient(#fefefe, #e7e7e7); background-repeat: repeat-x; border-radius: 2px; border: 1px solid #cfcfcf; color: #000; padding: 3px 5px; line-height: 10px; font: 11px Consolas, \"Liberation Mono\", Menlo, Courier, monospace; display: inline-block; } .markdown-body>*:first-child { margin-top: 0 !important; } .markdown-body>*:last-child { margin-bottom: 0 !important; } .markdown-body .headeranchor-link { position: absolute; top: 0; bottom: 0; left: 0; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px; } .markdown-body .headeranchor-link:focus { outline: none; } .markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6 { position: relative; margin-top: 1em; margin-bottom: 16px; font-weight: bold; line-height: 1.4; } .markdown-body h1 .headeranchor, .markdown-body h2 .headeranchor, .markdown-body h3 .headeranchor, .markdown-body h4 .headeranchor, .markdown-body h5 .headeranchor, .markdown-body h6 .headeranchor { display: none; color: #000; vertical-align: middle; } .markdown-body h1:hover .headeranchor-link, .markdown-body h2:hover .headeranchor-link, .markdown-body h3:hover .headeranchor-link, .markdown-body h4:hover .headeranchor-link, .markdown-body h5:hover .headeranchor-link, .markdown-body h6:hover .headeranchor-link { height: 1em; padding-left: 8px; margin-left: -30px; line-height: 1; text-decoration: none; } .markdown-body h1:hover .headeranchor-link .headeranchor, .markdown-body h2:hover .headeranchor-link .headeranchor, .markdown-body h3:hover .headeranchor-link .headeranchor, .markdown-body h4:hover .headeranchor-link .headeranchor, .markdown-body h5:hover .headeranchor-link .headeranchor, .markdown-body h6:hover .headeranchor-link .headeranchor { display: inline-block; } .markdown-body h1 { padding-bottom: 0.3em; font-size: 2.25em; line-height: 1.2; border-bottom: 1px solid #eee; } .markdown-body h2 { padding-bottom: 0.3em; font-size: 1.75em; line-height: 1.225; border-bottom: 1px solid #eee; } .markdown-body h3 { font-size: 1.5em; line-height: 1.43; } .markdown-body h4 { font-size: 1.25em; } .markdown-body h5 { font-size: 1em; } .markdown-body h6 { font-size: 1em; color: #777; } .markdown-body p, .markdown-body blockquote, .markdown-body ul, .markdown-body ol, .markdown-body dl, .markdown-body table, .markdown-body pre, .markdown-body .admonition { margin-top: 0; margin-bottom: 16px; } .markdown-body hr { height: 4px; padding: 0; margin: 16px 0; background-color: #e7e7e7; border: 0 none; } .markdown-body ul, .markdown-body ol { padding-left: 2em; } .markdown-body ul ul, .markdown-body ul ol, .markdown-body ol ol, .markdown-body ol ul { margin-top: 0; margin-bottom: 0; } .markdown-body li>p { margin-top: 16px; } .markdown-body dl { padding: 0; } .markdown-body dl dt { padding: 0; margin-top: 16px; font-size: 1em; font-style: italic; font-weight: bold; } .markdown-body dl dd { padding: 0 16px; margin-bottom: 16px; } .markdown-body blockquote { padding: 0 15px; color: #777; border-left: 4px solid #ddd; } .markdown-body blockquote>:first-child { margin-top: 0; } .markdown-body blockquote>:last-child { margin-bottom: 0; } .markdown-body table { display: block; width: 100%; overflow: auto; word-break: normal; word-break: keep-all; } .markdown-body table th { font-weight: bold; } .markdown-body table th, .markdown-body table td { padding: 6px 13px; border: 1px solid #ddd; } .markdown-body table tr { background-color: #fff; border-top: 1px solid #ccc; } .markdown-body table tr:nth-child(2n) { background-color: #f8f8f8; } .markdown-body img { max-width: 100%; -moz-box-sizing: border-box; box-sizing: border-box; } .markdown-body code, .markdown-body samp { padding: 0; padding-top: 0.2em; padding-bottom: 0.2em; margin: 0; font-size: 85%; background-color: rgba(0,0,0,0.04); border-radius: 3px; } .markdown-body code:before, .markdown-body code:after { letter-spacing: -0.2em; content: \"\\00a0\"; } .markdown-body pre>code { padding: 0; margin: 0; font-size: 100%; word-break: normal; white-space: pre; background: transparent; border: 0; } .markdown-body .codehilite { margin-bottom: 16px; } .markdown-body .codehilite pre, .markdown-body pre { padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; background-color: #f7f7f7; border-radius: 3px; } .markdown-body .codehilite pre { margin-bottom: 0; word-break: normal; } .markdown-body pre { word-wrap: normal; } .markdown-body pre code { display: inline; max-width: initial; padding: 0; margin: 0; overflow: initial; line-height: inherit; word-wrap: normal; background-color: transparent; border: 0; } .markdown-body pre code:before, .markdown-body pre code:after { content: normal; } /* Admonition */ .markdown-body .admonition { -webkit-border-radius: 3px; -moz-border-radius: 3px; position: relative; border-radius: 3px; border: 1px solid #e0e0e0; border-left: 6px solid #333; padding: 10px 10px 10px 30px; } .markdown-body .admonition table { color: #333; } .markdown-body .admonition p { padding: 0; } .markdown-body .admonition-title { font-weight: bold; margin: 0; } .markdown-body .admonition>.admonition-title { color: #333; } .markdown-body .attention>.admonition-title { color: #a6d796; } .markdown-body .caution>.admonition-title { color: #d7a796; } .markdown-body .hint>.admonition-title { color: #96c6d7; } .markdown-body .danger>.admonition-title { color: #c25f77; } .markdown-body .question>.admonition-title { color: #96a6d7; } .markdown-body .note>.admonition-title { color: #d7c896; } .markdown-body .admonition:before, .markdown-body .attention:before, .markdown-body .caution:before, .markdown-body .hint:before, .markdown-body .danger:before, .markdown-body .question:before, .markdown-body .note:before { font: normal normal 16px fontawesome-mini; -moz-osx-font-smoothing: grayscale; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; line-height: 1.5; color: #333; position: absolute; left: 0; top: 0; padding-top: 10px; padding-left: 10px; } .markdown-body .admonition:before { content: \"\\f056\\00a0\"; color: 333; } .markdown-body .attention:before { content: \"\\f058\\00a0\"; color: #a6d796; } .markdown-body .caution:before { content: \"\\f06a\\00a0\"; color: #d7a796; } .markdown-body .hint:before { content: \"\\f05a\\00a0\"; color: #96c6d7; } .markdown-body .danger:before { content: \"\\f057\\00a0\"; color: #c25f77; } .markdown-body .question:before { content: \"\\f059\\00a0\"; color: #96a6d7; } .markdown-body .note:before { content: \"\\f040\\00a0\"; color: #d7c896; } .markdown-body .admonition::after { content: normal; } .markdown-body .attention { border-left: 6px solid #a6d796; } .markdown-body .caution { border-left: 6px solid #d7a796; } .markdown-body .hint { border-left: 6px solid #96c6d7; } .markdown-body .danger { border-left: 6px solid #c25f77; } .markdown-body .question { border-left: 6px solid #96a6d7; } .markdown-body .note { border-left: 6px solid #d7c896; } .markdown-body .admonition>*:first-child { margin-top: 0 !important; } .markdown-body .admonition>*:last-child { margin-bottom: 0 !important; } /* progress bar*/ .markdown-body .progress { display: block; width: 300px; margin: 10px 0; height: 24px; -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px; background-color: #ededed; position: relative; box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1); } .markdown-body .progress-label { position: absolute; text-align: center; font-weight: bold; width: 100%; margin: 0; line-height: 24px; color: #333; text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000; -webkit-font-smoothing: antialiased !important; white-space: nowrap; overflow: hidden; } .markdown-body .progress-bar { height: 24px; float: left; -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px; background-color: #96c6d7; box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1); background-size: 30px 30px; background-image: -webkit-linear-gradient( 135deg, rgba(255, 255, 255, .4) 27%, transparent 27%, transparent 52%, rgba(255, 255, 255, .4) 52%, rgba(255, 255, 255, .4) 77%, transparent 77%, transparent ); background-image: -moz-linear-gradient( 135deg, rgba(255, 255, 255, .4) 27%, transparent 27%, transparent 52%, rgba(255, 255, 255, .4) 52%, rgba(255, 255, 255, .4) 77%, transparent 77%, transparent ); background-image: -ms-linear-gradient( 135deg, rgba(255, 255, 255, .4) 27%, transparent 27%, transparent 52%, rgba(255, 255, 255, .4) 52%, rgba(255, 255, 255, .4) 77%, transparent 77%, transparent ); background-image: -o-linear-gradient( 135deg, rgba(255, 255, 255, .4) 27%, transparent 27%, transparent 52%, rgba(255, 255, 255, .4) 52%, rgba(255, 255, 255, .4) 77%, transparent 77%, transparent ); background-image: linear-gradient( 135deg, rgba(255, 255, 255, .4) 27%, transparent 27%, transparent 52%, rgba(255, 255, 255, .4) 52%, rgba(255, 255, 255, .4) 77%, transparent 77%, transparent ); } .markdown-body .progress-100plus .progress-bar { background-color: #a6d796; } .markdown-body .progress-80plus .progress-bar { background-color: #c6d796; } .markdown-body .progress-60plus .progress-bar { background-color: #d7c896; } .markdown-body .progress-40plus .progress-bar { background-color: #d7a796; } .markdown-body .progress-20plus .progress-bar { background-color: #d796a6; } .markdown-body .progress-0plus .progress-bar { background-color: #c25f77; } .markdown-body .candystripe-animate .progress-bar{ -webkit-animation: animate-stripes 3s linear infinite; -moz-animation: animate-stripes 3s linear infinite; animation: animate-stripes 3s linear infinite; } @-webkit-keyframes animate-stripes { 0% { background-position: 0 0; } 100% { background-position: 60px 0; } } @-moz-keyframes animate-stripes { 0% { background-position: 0 0; } 100% { background-position: 60px 0; } } @keyframes animate-stripes { 0% { background-position: 0 0; } 100% { background-position: 60px 0; } } .markdown-body .gloss .progress-bar { box-shadow: inset 0 4px 12px rgba(255, 255, 255, .7), inset 0 -12px 0 rgba(0, 0, 0, .05); } /* Multimarkdown Critic Blocks */ .markdown-body .critic_mark { background: #ff0; } .markdown-body .critic_delete { color: #c82829; text-decoration: line-through; } .markdown-body .critic_insert { color: #718c00 ; text-decoration: underline; } .markdown-body .critic_comment { color: #8e908c; font-style: italic; } .markdown-body .headeranchor { font: normal normal 16px octicons-anchor; line-height: 1; display: inline-block; text-decoration: none; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } .headeranchor:before { content: '\\f05c'; } .markdown-body .task-list-item { list-style-type: none; } .markdown-body .task-list-item+.task-list-item { margin-top: 3px; } .markdown-body .task-list-item input { margin: 0 4px 0.25em -20px; vertical-align: middle; } /* Media */ @media only screen and (min-width: 480px) { .markdown-body { font-size:14px; } } @media only screen and (min-width: 768px) { .markdown-body { font-size:16px; } } @media print { .markdown-body * { background: transparent !important; color: black !important; filter:none !important; -ms-filter: none !important; } .markdown-body { font-size:12pt; max-width:100%; outline:none; border: 0; } .markdown-body a, .markdown-body a:visited { text-decoration: underline; } .markdown-body .headeranchor-link { display: none; } .markdown-body a[href]:after { content: \" (\" attr(href) \")\"; } .markdown-body abbr[title]:after { content: \" (\" attr(title) \")\"; } .markdown-body .ir a:after, .markdown-body a[href^=\"javascript:\"]:after, .markdown-body a[href^=\"#\"]:after { content: \"\"; } .markdown-body pre { white-space: pre; white-space: pre-wrap; word-wrap: break-word; } .markdown-body pre, .markdown-body blockquote { border: 1px solid #999; padding-right: 1em; page-break-inside: avoid; } .markdown-body .progress, .markdown-body .progress-bar { -moz-box-shadow: none; -webkit-box-shadow: none; box-shadow: none; } .markdown-body .progress { border: 1px solid #ddd; } .markdown-body .progress-bar { height: 22px; border-right: 1px solid #ddd; } .markdown-body tr, .markdown-body img { page-break-inside: avoid; } .markdown-body img { max-width: 100% !important; } .markdown-body p, .markdown-body h2, .markdown-body h3 { orphans: 3; widows: 3; } .markdown-body h2, .markdown-body h3 { page-break-after: avoid; } } aboutAbout me Name: DongKui School: University of Electronic Science and Technology of China Lable: gopher E-mail: dongkui0712@gmail.com Github Twitter About my Note As a primary gopher, thank you for your visiting. It&rsquo;s a record of my studing process rather than a blog, which comes from the idea to find a good way to organize the record of my studing."},{"title":"about","date":"2016-07-26T05:02:25.000Z","updated":"2017-12-13T01:11:51.000Z","comments":false,"path":"about/index.html","permalink":"http://dongkui.site/about/index.html","excerpt":"","text":"About me Name: DongKui Lable: Gopher, docker, k8s E-mail: dongkui0712@gmail.com School: University of Electronic Science and Technology of China About my NoteAs a primary gopher, thank you for your visiting. It’s a record of my studing process rather than a blog, which comes from the idea to find a good way to organize the record of my studing."},{"title":"categories","date":"2016-07-26T05:02:00.000Z","updated":"2016-07-26T05:42:31.000Z","comments":false,"path":"categories/index.html","permalink":"http://dongkui.site/categories/index.html","excerpt":"","text":""},{"title":"music","date":"2016-07-26T06:37:47.000Z","updated":"2016-07-26T06:38:15.000Z","comments":false,"path":"music/index.html","permalink":"http://dongkui.site/music/index.html","excerpt":"","text":""},{"title":"Tagcloud","date":"2016-07-26T05:01:12.000Z","updated":"2016-07-26T05:05:23.000Z","comments":false,"path":"tags/index.html","permalink":"http://dongkui.site/tags/index.html","excerpt":"","text":""},{"title":"test","date":"2017-12-28T01:28:26.000Z","updated":"2017-12-28T01:28:26.000Z","comments":true,"path":"test/index.html","permalink":"http://dongkui.site/test/index.html","excerpt":"","text":""}],"posts":[{"title":"linux_command","slug":"linux-command","date":"2017-12-28T01:43:16.000Z","updated":"2017-12-28T01:56:07.000Z","comments":false,"path":"2017/12/28/linux-command/","link":"","permalink":"http://dongkui.site/2017/12/28/linux-command/","excerpt":"","text":"资料： Linux 命令 后台运行和关闭、查看后台任务 &amp;:加在一个命令的最后，可以把这个命令放到后台执行 ctrl + z可以将一个正在前台执行的命令放到后台，并且处于暂停状态。 jobs查看当前有多少在后台运行的命令;jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识。 fg将后台中的命令调至前台继续运行。如果后台中有多个命令，可以用fg %jobnumber（是命令编号，不是进程号）将选中的命令调出。 bg将一个在后台暂停的命令，变成在后台继续执行。如果后台中有多个命令，可以用 bg %jobnumber 将选中的命令调出。 kill 法子1：通过jobs命令查看job号（假设为num），然后执行kill %num 法子2：通过ps命令查看job的进程号（PID，假设为pid），然后执行 kill pid前台进程的终止：Ctrl+c nohup如果让程序始终在后台执行，即使关闭当前的终端也执行（之前的&amp;做不到），这时候需要nohup。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。关闭中断后，在另一个终端 jobs 已经无法看到后台跑得程序了，此时利用 ps（进程查看命令） ps -aux | grep &quot;test.sh&quot; a:显示所有程序 u:以用户为主的格式来显示 x:显示所有程序，不以终端机来区分 查看磁盘df 以磁盘分区为单位查看文件系统df -hl显示格式为： 文件系统 容量 已用 可用 已用% 挂载点 命令which locate a command which returns the pathnames of the files (or links) which would be executed in the current environment, had its arguments been given as commands in a strictly POSIX-conformant shell. It does this by searching the PATH for executable files matching the names of the arguments. It does not follow symbolic links. ##whereis [-bmsu] locate programs -l 列出查找的目录 -b 只列出二进制格式的文档 -m 只找出说明文档 manual 路径下的文档 -s 只找出 source 来源档案 -u 搜寻不在上述三个项目当中的其他特殊文档 The whereis utility checks the standard binary directories for the specified programs, printing out the paths of any it finds. 用户管理Linux下管理员强行踢出用户的命令使用方法1pkill -kill -t pts/2 用户 /etc/passwdid: 查看id users: 查看当前系统中有哪些用户；who: 当前在线用户；w: 当前在线用户详细信息；finger: 查看用户详细信息； useradd: 增加用户usermod: 修改用户 su: 切换用户 passwd [LOGIN] : 修改密码 用户默认 shell 查看 echo $SHELL 设置位置： /etc/passwd 配置自动刷新 .bashrc: 通过 .profile 用户组： /etc/groupgroups: 查看自己所属用户组groupadd: 增加用户组groupdel 任务管理cron: 周期性执行； at: 特定实践执行一次；atq: 查询 at 任务列表；atrm: 删除任务队列中的任务； 系统locale设定locale 让Linux能够输入中文locale 软件运行时的语言环境 locale分类：语言符号及其分类(LC_CTYPE)，数字 (LC_NUMERIC)，比较和排序习惯(LC_COLLATE)，时间显示格式(LC_TIME)，货币单位(LC_MONETARY)，信息主要是提示信息,错误信息, 状态信息, 标题, 标签, 按钮和菜单等(LC_MESSAGES)，姓名书写方式(LC_NAME)，地址书写方式(LC_ADDRESS)，电话号码书写方式 (LC_TELEPHONE)，度量衡表达方式(LC_MEASUREMENT)，默认纸张尺寸大小(LC_PAPER)和locale对自身包含信息的概述(LC_IDENTIFICATION)。eg:123456789101112131415$ localeLANG=en_US.UTF-8LC_CTYPE=&quot;en_US.UTF-8&quot; #用户所使用的语言符号及其分类LC_NUMERIC=&quot;en_US.UTF-8&quot; #数字LC_TIME=&quot;en_US.UTF-8&quot; #时间显示格式LC_COLLATE=&quot;en_US.UTF-8&quot; #比较和排序习惯LC_MONETARY=&quot;en_US.UTF-8&quot; #LC_MONETARYLC_MESSAGES=&quot;en_US.UTF-8&quot; #信息主要是提示信息,错误信息, 状态信息, 标题, 标签, 按钮和菜单等LC_PAPER=&quot;en_US.UTF-8&quot; #默认纸张尺寸大小LC_NAME=&quot;en_US.UTF-8&quot; #姓名书写方式LC_ADDRESS=&quot;en_US.UTF-8&quot; #地址书写方式LC_TELEPHONE=&quot;en_US.UTF-8&quot; #电话号码书写方式LC_MEASUREMENT=&quot;en_US.UTF-8&quot; #度量衡表达方式LC_IDENTIFICATION=&quot;en_US.UTF-8&quot; #对自身包含信息的概述LC_ALL= locale定义文件放在/usr/share/i18n/locales 字符集就是字符，尤其是非英语字符在系统内的编码方式，也就是通常所说的内码，所有的字符集都放在 /usr/share/i18n/charmaps，所有的字符集也都是用Unicode编号索引的。Unicode用统一的编号来索引目前已知的全部的符号。而字符集则是这些符号的编码方式，或者说是在网络传输，计算机内部通信的时候，对于不同字符的表达方式，Unicode是一个静态的概念，字符集是一个动态的概念，是每一个字符传递或传输的具体形式. Locale 是软件在运行时的语言环境, 它包括语言(Language), 地域 (Territory) 和字符集(Codeset)。一个locale的书写格式为: 语言[_地域[.字符集]].生成的locale放在/usr/lib/locale/目录中 自定义locale 优先级的关系：LCALL&gt;LC*&gt;LANGLC_ALL的值将覆盖所有其他的locale设定 查看zh_CN使用的编码：/usr/lib/locale/zhCN/LC* 说明了使用何种编码 配置自启动开机启动时自动运行程序Linux加载后, 它将初始化硬件和设备驱动, 然后运行第一个进程init。init根据配置 文件继续引导过程，启动其它进程。通常情况下，修改放置在 /etc/rc或 /etc/rc.d 或 /etc/rc?.d 目录下的脚本文件，可以使init自动启动其它程序。例如：编辑 /etc/rc.d/rc.local 文件(该文件通常是系统最后启动的脚本)，在文件最末加上一行“xinit”或“startx”，可以在开机启动后直接进入X－Window。 登录时自动运行程序用户登录时，bash先自动执行系统管理员建立的全局登录script ： 1/ect/profile 然后bash在用户起始目录下按顺序查找三个特殊文件中的一个：123/.bash_profile、/.bash_login、/.profile， 但只执行最先找到的一个。因此，只需根据实际需要在上述文件中加入命令就可以实 现用户登录时自动运行某些程序（类似于DOS下的Autoexec.bat）。 文件系统文件touchtouch [OPTION]... FILE...Update the access and modification times of each FILE to the current time. rmrm [OPTION]... FILE...Remove (unlink) the FILE(s). mv123Usage: mv [OPTION]... [-T] SOURCE DEST or: mv [OPTION]... SOURCE... DIRECTORY or: mv [OPTION]... -t DIRECTORY SOURCE... Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY. cat1Usage: cat [OPTION]... [FILE]... Concatenate FILE(s), or standard input, to standard output. head123456789101112NAME head -- display first lines of a fileSYNOPSIS head [-n count | -c bytes] [file ...]DESCRIPTION This filter displays the first count lines or bytes of each of the specified files, or of the standard input if no files are specified. If count is omitted it defaults to 10. If more than a single file is specified, each file is preceded by a header consisting of the string ``==&gt; XXX &lt;==&apos;&apos; where ``XXX&apos;&apos; is the name of the file. taildos2unix链接目录cd1usage: cd [-L|[-P [-e]] [-@]] [dir] mkdircp权限查看文件权限的命令：1ls -l xxx.xxx （xxx.xxx是文件名） 那么就会出现相类似的信息，主要都是这些： 1-rw-rw-r-- 一共有10位数 其中： 最前面那个 - 代表的是类型123中间那三个 rw- 代表的是所有者（user）然后那三个 rw- 代表的是组群（group）最后那三个 r-- 代表的是其他人（other） 1234r 表示文件可以被读（read）w 表示文件可以被写（write）x 表示文件可以被执行（如果它是程序的话）- 表示相应的权限还没有被授予 修改文件权限:在终端输入：1chmod o+w xxx.xxx 表示给其他人授予写xxx.xxx这个文件的权限 1chmod go-rw xxx.xxx 表示删除xxx.xxx中组群和其他人的读和写的权限 其中：1234u 代表所有者（user）g 代表所有者所在的组群（group）o 代表其他人，但不是u和g （other）a 代表全部的人，也就是包括u，g和o 123r 表示文件可以被读（read）w 表示文件可以被写（write）x 表示文件可以被执行（如果它是程序的话） 其中：rwx也可以用数字来代替1234r ------------4w -----------2x ------------1- ------------0 行动：123+ 表示添加权限- 表示删除权限= 表示使之成为唯一的权限 当大家都明白了上面的东西之后，那么我们常见的以下的一些权限就很容易都明白了：1234567-rw------- (600) 只有所有者才有读和写的权限-rw-r--r-- (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限-rwx------ (700) 只有所有者才有读，写，执行的权限-rwxr-xr-x (755) 只有所有者才有读，写，执行的权限，组群和其他人只有读和执行的权限-rwx--x--x (711) 只有所有者才有读，写，执行的权限，组群和其他人只有执行的权限-rw-rw-rw- (666) 每个人都有读写的权限-rwxrwxrwx (777) 每个人都有读写和执行的权限 压缩tar12345678910111213141516171819202122232425262728293031-A 新增压缩文件到已存在的压缩-B 设置区块大小-c 建立新的压缩文件-d 记录文件的差别-r 添加文件到已经压缩的文件-u 添加改变了和现有的文件到已经存在的压缩文件-x 从压缩的文件中提取文件-t 显示压缩文件的内容-z 支持gzip解压文件-j 支持bzip2解压文件-Z 支持compress解压文件-v 显示操作过程-l 文件系统边界设置-k 保留原有文件不覆盖-m 保留文件不被覆盖-W 确认压缩文件的正确性 例子： 1234567tar -cvf log.tar log2012.log 仅打包，不压缩！tar -zcvf log.tar.gz log2012.log 打包后，以 gzip 压缩tar -jcvf log.tar.bz2 log2012.log 打包后，以 bzip2 压缩在参数 f 之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。 如果加 z 参数，则以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar包； 如果加 j 参数，则以 .tar.bz2 来作为tar包名。 将mifan压缩包解压:1tar zxvf mifan.tar.gz 将根目录下面的mifan压缩:1tar czvf mifan.tar.gz /mifan/* 文本管道grep 搜索文本sort 排序uniq 删除相邻重复行cut 截取文本tr 文本转换paste 文本合并split 分割大文件网络网络接口类型 lo：本地回环接口 eth[0-9]：以太网接口 pppx：点对点的连接 ifconfig 命令：配置网络接口ifconfig打开或关闭网络接口，设置IP地址与子网掩码，以及其他选项和参数。通常在启动时通过命令行从配置文件中读取参数来运行，但也可以手动运行以做修改。 命令格式：12ifconfig [-v] [-a] [-s] [interface]ifconfig [-v] interface [aftype] options | address ... 查看活动的网卡信息1ifconfig ifconfig eth0 down 类似于 ifdown eth0关闭 eth0 网卡 ifconfig eth0 up 类似于 ifup eth0 RedHat, CentOS 网络配置文件：/etc/sysconfig/network-scripts/ 目录下， eth0 的配置文件为： ifcfg-eth0 1234567891011121314151617181920212223242526272829303132Usage: ifconfig [-a] [-v] [-s] &lt;interface&gt; [[&lt;AF&gt;] &lt;address&gt;] [add &lt;address&gt;[/&lt;prefixlen&gt;]] [del &lt;address&gt;[/&lt;prefixlen&gt;]] [[-]broadcast [&lt;address&gt;]] [[-]pointopoint [&lt;address&gt;]] [netmask &lt;address&gt;] [dstaddr &lt;address&gt;] [tunnel &lt;address&gt;] [outfill &lt;NN&gt;] [keepalive &lt;NN&gt;] [hw &lt;HW&gt; &lt;address&gt;] [metric &lt;NN&gt;] [mtu &lt;NN&gt;] [[-]trailers] [[-]arp] [[-]allmulti] [multicast] [[-]promisc] [mem_start &lt;NN&gt;] [io_addr &lt;NN&gt;] [irq &lt;NN&gt;] [media &lt;type&gt;] [txqueuelen &lt;NN&gt;] [[-]dynamic] [up|down] ... &lt;HW&gt;=Hardware Type. List of possible hardware types: loop (Local Loopback) slip (Serial Line IP) cslip (VJ Serial Line IP) slip6 (6-bit Serial Line IP) cslip6 (VJ 6-bit Serial Line IP) adaptive (Adaptive Serial Line IP) ash (Ash) ether (Ethernet) ax25 (AMPR AX.25) netrom (AMPR NET/ROM) rose (AMPR ROSE) tunnel (IPIP Tunnel) ppp (Point-to-Point Protocol) hdlc ((Cisco)-HDLC) lapb (LAPB) arcnet (ARCnet) dlci (Frame Relay DLCI) frad (Frame Relay Access Device) sit (IPv6-in-IPv4) fddi (Fiber Distributed Data Interface) hippi (HIPPI) irda (IrLAP) ec (Econet) x25 (generic X.25) eui64 (Generic EUI-64) &lt;AF&gt;=Address family. Default: inet List of possible address families: unix (UNIX Domain) inet (DARPA Internet) inet6 (IPv6) ax25 (AMPR AX.25) netrom (AMPR NET/ROM) rose (AMPR ROSE) ipx (Novell IPX) ddp (Appletalk DDP) ec (Econet) ash (Ash) x25 (CCITT X.25) ip命令ip link：配置网络接口属性 ip link show：查看所有网络接口属性信息 ip -s link show：查看所有统计信息 ip link set ethX {up|down|arp {on|off}}:设置网络接口的工作属性 ip addr：配置网络地址 ip addr show：查看网络信息，看到的信息和ip link show差不多，都比较简要 ip addr add IP dev ethX ：配置IP地址（此命令配置的网卡信息利用ifconfig查看不到，需要利用ip addr show查看） ip addr add IP dev ethx label ethX:X：配置子Ip并对其加别名 route 命令:指定静态路由 route: 直接可以查看我们系统上的路由信息 route -n: 以数字的形式显示路由信息 动态配置： route add default gw 192.168.159.2: 添加默认网关 配置文件 /etc/sysconfig/network 中添加 GATEWAY=192.168.159.2 1234567891011121314151617Usage: route [-nNvee] [-FC] [&lt;AF&gt;] List kernel routing tables route [-v] [-FC] &#123;add|del|flush&#125; ... Modify routing table for AF. route &#123;-h|--help&#125; [&lt;AF&gt;] Detailed usage syntax for specified AF. route &#123;-V|--version&#125; Display version/author and exit. -v, --verbose be verbose -n, --numeric don&apos;t resolve names -e, --extend display other/more information -F, --fib display Forwarding Information Base (default) -C, --cache display routing cache instead of FIB &lt;AF&gt;=Use &apos;-A &lt;af&gt;&apos; or &apos;--&lt;af&gt;&apos;; default: inet List of possible address families (which support routing): inet (DARPA Internet) inet6 (IPv6) ax25 (AMPR AX.25) netrom (AMPR NET/ROM) ipx (Novell IPX) ddp (Appletalk DDP) x25 (CCITT X.25) 例子1route add -net 192.168.45.128/25 zulu-gw.atrust.net 该命令通过网关路由器zulu-gw.atrust.net添加一条到192.168.45.128/25网络的路由。通常，网关路由器是相邻主机或本地主机的一个接口（Linux要求在网关地址前加上gw选项名）。route命令必须能够将zulu-gw.atrust.net解析成IP地址。 添加路由123route add -host：添加主机路由route add -net：添加网络路由route add -net 0.0.0.0：添加默认路由 格式：route add -net|host DEST gw NEXTHOP例如，添加一条路由，让主机通过172.16.7.3访问192.168.0.0/24网段 1route add –net 192.168.0.0/24 gw 172.16.7.3 ping常用： -c: 指定 ping 次数； -i: 指定 ping 包发送间隔； -w: 如果没有反应，则在指定超时时间后推出； 设置静态 ip修改网卡配置文件：/etc/network/interfaces 1234567auto eth0iface eth0 inet staticaddress 192.168.0.117gateway 192.168.0.1 #这个地址你要确认下 网关是不是这个地址netmask 255.255.255.0network 192.168.0.0broadcast 192.168.0.255 修改 dns 解析因为以前是dhcp解析，所以会自动分配dns服务器地址 而一旦设置为静态ip后就没有自动获取到的dns服务器了 要自己设置一个1sudo vim /etc/resolv.conf 写上一个公网的DNS1nameserver 202.96.128.86 重启网卡：1sudo /etc/init.d/network restart 查看路由信息1route -n DNS/etc/hosts 文件最初：纪录主机名与 IP 的对应关系 目前： 加快域名解析 方便小型局域网使用内部设备 dig显示 dns 查询过程 1dig baidu.com dig -x &lt;ip&gt;从IP地址查询域名 host 返回当前请求域名的各种记录 也可以用于逆向查询，即从IP地址查询域名 nslookup用于互动式地查询域名记录 whois查看域名的注册情况。 1whois github.com ssss是Socket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。 它使用了 TCP协议栈中 tcp_diag（是一个用于分析统计的模块），能直接从获得第一手内核信息，这就使得 ss命令快捷高效。在没有 tcp_diag，ss也可以正常运行。 包apt-getdpkg curlcurl网站开发指南 wgetLinux系统中的wget是一个下载文件的工具。wget支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。wget可以在用户退出系统的之后在后台执行。这意味这你可以登录系统，启动一个wget下载任务，然后退出系统，wget将在后台执行直到任务完成。 wget 可以跟踪HTML页面上的链接依次下载来创建远程服务器的本地版本，完全重建原始站点的目录结构。这又常被称作”递归下载”。在递归下载的时候，wget 遵循Robot Exclusion标准(/robots.txt). wget可以在下载的同时，将链接转换成指向本地文件，以方便离线浏览。","categories":[{"name":"linux","slug":"linux","permalink":"http://dongkui.site/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://dongkui.site/tags/linux/"}],"keywords":[{"name":"linux","slug":"linux","permalink":"http://dongkui.site/categories/linux/"}]},{"title":"Go package: HTTP 服务器实现","slug":"go_http_server","date":"2017-12-12T08:29:22.000Z","updated":"2017-12-28T02:05:13.000Z","comments":true,"path":"2017/12/12/go_http_server/","link":"","permalink":"http://dongkui.site/2017/12/12/go_http_server/","excerpt":"本文简单分析 go 1.9 http 服务器的实现。介绍 net/http 包中实现 HTTP 服务器的几个重要的函数和结构体的实现和用法。","text":"本文简单分析 go 1.9 http 服务器的实现。介绍 net/http 包中实现 HTTP 服务器的几个重要的函数和结构体的实现和用法。 hello world可以用如下代码实现简单的 go 语言 HTTP 服务的 hello world：1234567891011121314151617package mainimport ( \"io\" \"net/http\" \"log\")// hello world, the web serverfunc HelloServer(w http.ResponseWriter, req *http.Request) &#123; io.WriteString(w, \"hello, world!\\n\")&#125;func main() &#123; http.HandleFunc(\"/hello\", HelloServer) log.Fatal(http.ListenAndServe(\":12345\", nil))&#125; 最简单的 golang HTTP 服务器由 http.HandleFunc(pattern string, handler func(ResponseWriter, *Request)) 做路由分发， http.ListenAndServe(addr, hanlder) 开启监听并启动服务。 http.HandleFunc123func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) &#123; DefaultServeMux.HandleFunc(pattern, handler)&#125; HandleFunc 函数在 DefaultServeMux 中为指定的 pattern 注册 HTTP 服务处理函数 func(ResponseWriter, *Request) ，即由该 handler 处理对 pattern 的请求。 http.ListenAndServe代码如下：1234func ListenAndServe(addr string, handler Handler) error &#123; server := &amp;Server&#123;Addr: addr, Handler: handler&#125; return server.ListenAndServe()&#125; ListenAndServe 监听 TCP 地址，调用 Server 处理该连接中的请求。如果 handler 为空，则使用 DefaultServeMux。 该函数，其实是默认 Server 的 ListenAndServe 方法的封装。 ServeMuxServeMux 是一个 HTTP 请求多路转接器。它将收到的 HTTP 请求的 URL 和已经注册的 pattern 做匹配，并调用最匹配的 pattern 对应的 hanlder 来处理该请求。 pattern 是固定的、以跟路径符号 / 开始的路径，如 “/favicon.ico”。也可以是跟路径的子树，如 “/images/“。匹配时，长 pattern 优先级更高。 以 / 结尾的 pattern 定义了一个子树。/ 本身可以匹配任何 pattern。 如果已经注册了一个如 /images/ 的子树 pattern，接收到一个如 /images 的不带最后 / 符号的请求时，ServeMux 会将该请求重定向到子树 pattern /images/ 对应的处理器 handler（除非 /images 被单独注册）。 pattern 可以可选地指定域名。指定域名的 pattern 只会匹配该域名的 URL。指定域名的 pattern 优先级高于未指定的。 ServeMux also takes care of sanitizing the URL request path,redirecting any request containing . or .. elements or repeated slashes to an equivalent, cleaner URL. 1234567891011type ServeMux struct &#123; mu sync.RWMutex m map[string]muxEntry hosts bool // whether any patterns contain hostnames&#125;type muxEntry struct &#123; explicit bool h Handler pattern string&#125; ServeMux 的 ServeHTTP 方法分发 HTTP 请求到与其 URL 匹配度最高的 pattern 注册的处理器 h：mux.Handler(r) 返回匹配度最高的处理器 h，然后调用 h.ServeHTTP(w, r) 处理请求。 1234567891011func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request) &#123; if r.RequestURI == &quot;*&quot; &#123; if r.ProtoAtLeast(1, 1) &#123; w.Header().Set(&quot;Connection&quot;, &quot;close&quot;) &#125; w.WriteHeader(StatusBadRequest) return &#125; h, _ := mux.Handler(r) h.ServeHTTP(w, r)&#125; ServerServer 结构体定义启动 HTTP 服务器的参数123456789101112131415161718type Server struct &#123; Addr string Handler Handler TLSConfig *tls.Config ReadTimeout time.Duration ReadHeaderTimeout time.Duration WriteTimeout time.Duration IdleTimeout time.Duration MaxHeaderBytes int TLSNextProto map[string]func(*Server, *tls.Conn, Handler) ConnState func(net.Conn, ConnState) ErrorLog *log.Logger&#125; 此处的 Handler 是个接口，意味着只要实现 ServeHTTP(ResponseWriter, *Request) 方法，就能作为 Server 的 Handler：123type Handler interface &#123; ServeHTTP(ResponseWriter, *Request)&#125; ListenAndServe 方法ListenAndServe 方法监听 Addr 字段指定的 TCP 连接，处理请求。接收的连接激活了 TCP keep-alives。如果 Addr 为空，则使用 “:http”。总是返回非空 error。1234567891011func (srv *Server) ListenAndServe() error &#123; addr := srv.Addr if addr == &quot;&quot; &#123; addr = &quot;:http&quot; &#125; ln, err := net.Listen(&quot;tcp&quot;, addr) if err != nil &#123; return err &#125; return srv.Serve(tcpKeepAliveListener&#123;ln.(*net.TCPListener)&#125;)&#125; ListenAndServe 方法的实现主要有两个步骤： net.Listen(“tcp”, addr) 得到 net.Listener Serve 方法并发处理监听到的请求 下面看看 Serve 方法实现的主要步骤（只保留主要逻辑）： 12345678910111213func (srv *Server) Serve(l net.Listener) error &#123; defer l.Close() ... baseCtx := context.Background() // base is always background, per Issue 16220 ctx := context.WithValue(baseCtx, ServerContextKey, srv) for &#123; rw, _ := l.Accept() c := srv.newConn(rw) go c.serve(ctx) &#125;&#125; 最终，serve 方法调用 Server 中的 Handler 的 ServeHTTP 方法处理该请求。 注册函数Handle 和 HandleFunc 将 HTTP 请求处理函数注册到 ServeMux 中123func Handle(pattern string, handler Handler) &#123; DefaultServeMux.Handle(pattern, handler) &#125; 123func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) &#123; DefaultServeMux.HandleFunc(pattern, handler)&#125; 使用方式略有差别。 HandleFunc（pattern, handler) 与 Handle(pattern, HandlerFunc(handler)) 效果一样。例如： 1234567http.Handle(&quot;/foo&quot;, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123; fmt.Fprintf(w, &quot;Hello, %q&quot;, html.EscapeString(r.URL.Path))&#125;))http.HandleFunc(&quot;/bar&quot;, func(w http.ResponseWriter, r *http.Request) &#123; fmt.Fprintf(w, &quot;Hello, %q&quot;, html.EscapeString(r.URL.Path))&#125;) 也可以从 ServeMux.HandleFunc 的实现看出来：123func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) &#123; mux.Handle(pattern, HandlerFunc(handler))&#125; 比较http 包有几个概念易混，特别分析对比一下。 HandlerFuncHandlerFunc 是一种类型，是以 func(ResponseWriter, *Request) 申明的函数。是个将普通函数转化为 HTTP 处理器的适配器。 123456type HandlerFunc func(ResponseWriter, *Request)// ServeHTTP calls f(w, r).func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) &#123; f(w, r)&#125; 用法： 定义普通函数 handlerFunc 如下，HandlerFunc(f) 即是一个调用 f 的 HTTP 处理器。1func f(w http.ResponseWriter, r *http.Request) &#123; ... &#125; HandlerHandler 是个接口。功能如其名：处理器。 http 包中实现 ServeHTTP(ResponseWriter, *Request) 方法即拥有处理 HTTP 请求的能力。123type Handler interface &#123; ServeHTTP(ResponseWriter, *Request)&#125; HandlerFunc 类型和 ServeMux 结构体都实现了 ServeHTTP(w ResponseWriter, r *Request) 方法， 也就是说，HandlerFunc 类型和 ServeMux 结构体都是一种 Handler。 HandlerFunc 的 ServeHTTP 方法直接调用自身，处理 HTTP 请求。 ServeMux 调用与请求路径匹配的 func(ResponseWriter, *Request) 类型的处理函数。 同样的，我们可以自己定义一个实现 ServeHTTP(ResponseWriter, *Request) 方法的结构体，定制我们自己的 HTTP 处理器。第三方的路由处理器（如 mux, httprouter 等）都是 Handler 的一种实现。 Handle 和 HandleFunc 的作用就是将 HTTP 请求处理函数注册到 ServeMux 中。","categories":[{"name":"golang","slug":"golang","permalink":"http://dongkui.site/categories/golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://dongkui.site/tags/golang/"},{"name":"http","slug":"http","permalink":"http://dongkui.site/tags/http/"}],"keywords":[{"name":"golang","slug":"golang","permalink":"http://dongkui.site/categories/golang/"}]},{"title":"Resource Pool","slug":"resource_pool","date":"2017-10-27T15:35:25.000Z","updated":"2017-12-27T09:14:36.000Z","comments":true,"path":"2017/10/27/resource_pool/","link":"","permalink":"http://dongkui.site/2017/10/27/resource_pool/","excerpt":"Here is my resource pool, which including some wonderful site and blog link.","text":"Here is my resource pool, which including some wonderful site and blog link. As a CoderA Programmer PreparesA wonderful huge book for a coder who want to go higher. It’s a complete collection of useful tips for the coder. Personal Site 阮一峰的网络日志 Chengwei’s Words 语行 吕立青的博客 Legendtkl: blogs of Tao Kelu(taokelu@gmail.com) Youmai のBlog: network, linux, go, python, algorithm golang(helpful blog link) divan’s blog : an amazing blog Applied Go: Go beyond the Go tutorials Tony Bai : golang, docker Hao web 小白妹妹写代码: a blog of a cute girl which focus on web Reading 推酷 medium 一览 Study on Line tuts+: 资源多，质量好，不只视频还有文字教程。 Lynda: 同tuts+，有条理。 Course Hero 慕课网 慕课中国 网易云课堂 网易公开课 软件开发类 阿里云大学 Forums 数人云博客 云栖社区 酷壳 segmentfault docker forums.docker.com blog.docker.com dockone scrum scrum中文社区 News Sites 月光博客 电子技术应用 Resource Sites allitebooks: you can download almost all IT ebooks here","categories":[{"name":"resource","slug":"resource","permalink":"http://dongkui.site/categories/resource/"}],"tags":[{"name":"site","slug":"site","permalink":"http://dongkui.site/tags/site/"}],"keywords":[{"name":"resource","slug":"resource","permalink":"http://dongkui.site/categories/resource/"}]},{"title":"Go tool: present","slug":"go_tool_present","date":"2017-09-21T08:29:22.000Z","updated":"2017-12-28T02:07:56.000Z","comments":true,"path":"2017/09/21/go_tool_present/","link":"","permalink":"http://dongkui.site/2017/09/21/go_tool_present/","excerpt":"","text":"文件格式header 格式header 部分格式如下： 12345678910Title of documentSubtitle of document15:04 2 Jan 2006Tags: foo, bar, baz&lt;blank line&gt;Author NameJob title, Companyjoe@example.comhttp://url/@twitter_name 第一个非空非注释行为标题。副标题, 日期和标签行为可选。 日期行可写成如下格式: 12 Jan 2006 标签行是以逗号分隔的标签列表，可用作分类文档。 presenters 信息部分可包含：文本，twitter名，链接。展示的时候，只有文本行会显示在首页。 多个 presenters 可以用空行分隔描述 sections 格式接下来是 sections 部分，每部分都在一个空行后面: 123456789101112131415161718192021222324252627282930* Title of slide or section (must have asterisk)** Some Text** ** Subsection** - bullets* - more bullets* - a bullet with** *** Sub-subsection** Some More text** Preformatted text* is indented (however you like)** Further Text, including invocations like:** .code x.go /^func main/,/^&#125;/* .play y.go* .image image.jpg* .background image.jpg* .iframe http://foo* .link http://foo label* .html file.html* .caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]** Again, more text* * Blank lines are OK (not mandatory) after the title and after the text. Text, bullets, and .code etc. are all optional; title is not.* 说明 commentary 注释 Lines starting with # in column 1 are commentary. 注释以 # 开头* Fonts:* Within the input for plain text or lists, text bracketed by font markers will be presented in italic, bold, or program font. Marker characters are _ (italic), (bold) and ` (program font). An opening marker must be preceded by a space or punctuation character or else be at start of a line; similarly, a closing marker must be followed by a space or punctuation character or else be at the end of a line. Unmatched markers appear as plain text. There must be no spaces between markers. Within marked text, a single marker character becomes a space and a doubled single marker quotes the marker character. at the beginning of a line or else be preceded by a space or punctuation; similarly a closing marker must be at the end of the lineo* 123456* _italic_* *bold** `program`* Markup—_especially_italic_text_—can easily be overused.* _Why_use_scoped__ptr_? Use plain ***ptr* instead.* * Inline links: Links can be included in any text with the form [[url][label]], or [[url]] to use the URL itself as the label. * Functions A number of template functions are available through invocations in the input text. Each such invocation contains a period as the first character on the line, followed immediately by the name of the function, followed by any arguments. A typical invocation might be* 12* .play demo.go /^func show/,/^&#125;/* * (except that the “.play” must be at the beginning of the line and not be indented like this.)* Here follows a description of the functions: * code Injects program source into the output by extracting code from files and injecting them as HTML-escaped &lt;pre&gt; blocks. The argument is a file name followed by an optional address that specifies what section of the file to display. The address syntax is similar in its simplest form to that of ed, but comes from sam and is more general. See* 12* http://plan9.bell-labs.com/sys/doc/sam/sam.html Table II* * for full details. The displayed block is always rounded out to a full line at both ends.* If no pattern is present, the entire file is displayed.* Any line in the program that ends with the four characters* 12* OMIT* is deleted from the source before inclusion, making it easy to write things like* 12* .code test.go /START OMIT/,/END OMIT/* * to find snippets like this* 12345* tedious_code = boring_function()* // START OMIT* interesting_code = fascinating_function()* // END OMIT* * and see only this:* 12* interesting_code = fascinating_function()* * Also, inside the displayed text a line that ends* 12* // HL* * will be highlighted in the display; the ‘h’ key in the browser will toggle extra emphasis of any highlighted lines. A highlighting mark may have a suffix word, such as* 12* // HLxxx* * Such highlights are enabled only if the code invocation ends with “HL” followed by the word:* 12* .code test.go /^type Foo/,/^&#125;/ HLxxx* * The .code function may take one or more flags immediately preceding the filename. This command shows test.go in an editable text area:* 12* .code -edit test.go* * This command shows test.go with line numbers:* 12* .code -numbers test.go* * play:* The function “play” is the same as “code” but puts a button on the displayed source so the program can be run from the browser. Although only the selected text is shown, all the source is included in the HTML output so it can be presented to the compiler. link:* Create a hyperlink. The syntax is 1 or 2 space-separated arguments. The first argument is always the HTTP URL. If there is a second argument, it is the text label to display for this link.* 12* .link http://golang.org golang.org* * image:* The template uses the function “image” to inject picture files.* The syntax is simple: 1 or 3 space-separated arguments. The first argument is always the file name. If there are more arguments, they are the height and width; both must be present, or substituted with an underscore. Replacing a dimension argument with the underscore parameter preserves the aspect ratio of the image when scaling.* 1234* .image images/betsy.jpg 100 200** .image images/janet.jpg _ 300* * video:* The template uses the function “video” to inject video files.* The syntax is simple: 2 or 4 space-separated arguments. The first argument is always the file name. The second argument is always the file content-type. If there are more arguments, they are the height and width; both must be present, or substituted with an underscore. Replacing a dimension argument with the underscore parameter preserves the aspect ratio of the video when scaling.* 1234* .video videos/evangeline.mp4 video/mp4 400 600** .video videos/mabel.ogg video/ogg 500 _* * background:* The template uses the function “background” to set the background image for a slide. The only argument is the file name of the image.* 12* .background images/susan.jpg* * caption:* The template uses the function “caption” to inject figure captions.* The text after “.caption” is embedded in a figcaption element after processing styling and links as in standard text lines.* 12* .caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]* * iframe:* The function “iframe” injects iframes (pages inside pages). Its syntax is the same as that of image. html:* The function html includes the contents of the specified file as unescaped HTML. This is useful for including custom HTML elements that cannot be created using only the slide format. It is your responsibilty to make sure the included HTML is valid and safe.* 12* .html file.html* * Presenter notes:* Presenter notes may be enabled by appending the “-notes” flag when you run your “present” binary.* This will allow you to open a second window by pressing ‘N’ from your browser displaying your slides. The second window is completely synced with your main window, except that presenter notes are only visible on the second window.* Lines that begin with “: “ are treated as presenter notes.* 1234567* * Title of slide** Some Text** : Presenter notes (first paragraph)* : Presenter notes (subsequent paragraph(s))* * Notes may appear anywhere within the slide text. For example:* 12345678* * Title of slide** : Presenter notes (first paragraph)** Some Text** : Presenter notes (subsequent paragraph(s))* * This has the same result as the example above. package present Golang技术幻灯片的查看方法","categories":[{"name":"golang","slug":"golang","permalink":"http://dongkui.site/categories/golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://dongkui.site/tags/golang/"},{"name":"tools","slug":"tools","permalink":"http://dongkui.site/tags/tools/"}],"keywords":[{"name":"golang","slug":"golang","permalink":"http://dongkui.site/categories/golang/"}]},{"title":"PaaS之网络模型设计--分享整理","slug":"note-networkModelOfPaaS","date":"2017-07-11T14:56:49.000Z","updated":"2017-12-28T02:02:05.000Z","comments":true,"path":"2017/07/11/note-networkModelOfPaaS/","link":"","permalink":"http://dongkui.site/2017/07/11/note-networkModelOfPaaS/","excerpt":"","text":"本文整理网宿科技云计算架构师 吴龙辉 2017年7月11日在 DockerOne.io 的技术分享。 重点说明 Kubernetes 和 Docker 网络，从而来探索 Pass 的网络模型设计，主要包括一下几方面： Pass 和 Iass 的网络需求 Pass 的网络模型设计 Kubernetes 和 Docker 的网络说明 PaaS和IaaS的网络需求概念上来说，IaaS是基础架构即服务，PaaS是平台即服务。 共同点从服务化角度来说两者对于网络的需求有共同点： 一台宿主机的网络隔离，一台宿主机要运行多个环境黑盒（VM或者容器），这时候每个环境黑盒的网络需要隔离。 环境变更后的访问一致性，比如VM或者容器迁移到其他宿主机的时候，如何保证外部访问不感知，比较通用的解决方案网络代理层来解决。 不同点实现上来说，IaaS是VM管理，PaaS是容器编排，两者的网络也会有些不同： 容器比VM轻量级，启停更快，更方便迁移，所以PaaS的整个调度策略会更灵活，容器的迁移频率是高于VM，当容器迁移的时候，PaaS需要更加快速的解决变化后的网络访问。 VM安全高于容器，IaaS这部分会更多在隔离和安全上有所考虑，当然这个可能是公有云和私有云的一个定位，个人认为IaaS比较适合公有云，PaaS比较适合私有云。 第二部分 PaaS的网络模型设计以上部分我们讨论了PaaS网络需求，总结来说PaaS需要解决宿主机的网络隔离和环境变更后的访问一致性问题，然后在灵活性上需要更加注重，私有云的定位可以减少因为安全和隔离的代价，保证高性能。 宿主机的网络隔离网络隔离最基本问题就是要解决端口冲突，一种思路是容器通过端口映射访问，宿主机的端口由系统分配避免端口冲突，这种方式对使用的便利性是有意义的，但并不理想，因为需要对各种端口进行映射，这会限制宿主机的能力，在容器编排上也增加了复杂度。 端口是个稀缺资源，这就需要解决端口冲突和动态分配端口问题。这不但使调度复杂化，而且应用程序的配置也将变得复杂，具体表现为端口冲突、重用和耗尽。 NAT将地址空间分段的做法引入了额外的复杂度。比如容器中应用所见的IP并不是对外暴露的IP，因为网络隔离，容器中的应用实际上只能检测到容器的IP，但是需要对外宣称的则是宿主机的IP，这种信息的不对称将带来诸如破坏自注册机制等问题。 所以就要引入一层网络虚拟层来解决网络隔离，现在说的比较多的大二层网络，L2 over L3，比如OVS, Flannel, Calico等等。 环境变更后的访问一致性一个通用方案来说通过代理层提供不变的访问入口，像Openstack的网络节点就是一个L3(IP)的访问入口，而PaaS更多的是提供L4（TCP, UDP）和L7(HTTP)的访问，L4比较流行的开源方案有LVS，L7的是Nginx和Haproxy. 因此PaaS的网络结构有： 物理网络 虚拟层网络 代理层网络 第三部分 Kubernetes和Docker的网络说明Kubernete+Docker作为目前最流行的开源PaaS实现，通过其实现细节可以更加理解PaaS的网络模型实践。 容器网络Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。 但是Docker网桥是宿主机虚拟出来的，并不是真实存在的网络设备，外部网络是无法寻址到的，这也意味着外部网络无法通过直接Container-IP访问到容器。 Pod内部容器通信Kubernetes中Pod是容器的集合，Pod包含的容器都运行在同一个宿主机上，这些容器将拥有同样的网络空间，容器之间能够互相通信，它们能够在本地访问其他容器的端口。 实际上Pod都包含一个网络容器，它不做任何事情，只是用来接管Pod的网络，业务容器通过加入网络容器的网络从而实现网络共享。 Pod的启动方式类似于：12$ docker run -p 80:80 --name network-container -d &lt;network-container-image&gt;$ docker run --net container:network-container -d &lt;image&gt; 所以Pod的网络实际上就是Pod中网络容器的网络，所以往往就可以认为Pod网络就是容器网络，在理解Kubernetes网络的时候这是必须要需要清楚的,比如说Pod的Pod-IP就是网络容器的Container-IP。 Pod间通信Kubernetes网络模型是一个扁平化网络平面，在这个网络平面内，Pod作为一个网络单元同Kubernetes Node的网络处于同一层级。 在这个网络拓扑中满足以下条件： Pod间通信：Pod1和Pod2（同主机），Pod1和Pod3(跨主机)能够通信 Node与Pod间通信：Node1和Pod1/ Pod2(同主机)，Pod3(跨主机)能够通信 为此需要实现： Pod的Pod-IP是全局唯一的。其实做法也很简单，因为Pod的Pod-IP是Docker网桥分配的，所以将不同Kubernetes Node的 Docker网桥配置成不同的IP网段即可。 Node上的Pod/容器原生能通信，但是Node之间的Pod/容器如何通信的，这就需要对Docker进行增强，在容器集群中创建一个覆盖网络(Overlay Network)，联通各个节点，目前可以通过第三方网络插件来创建覆盖网络，比如Flannel和Open vSwitch等等。 以Flannel来说Flannel由CoreOS团队设计开发的一个覆盖网络工具，Flannel 通过在集群中创建一个覆盖网络，为主机设定一个子网，通过隧道协议封装容器之间的通信报文，实现容器的跨主机通信。Flannel将会运行在所有的Node之上，Flannel实现的网络结构如图所示： 代理层Kubernetes中的Service就是在Pod之间起到服务代理的作用，对外表现为一个单一访问接口，将请求转发给Pod，Service的网络转发是Kubernetes实现服务编排的关键一环。 Service都会生成一个虚拟IP，称为Service-IP， Kuberenetes Porxy组件负责实现Service-IP路由和转发，在容器覆盖网络之上又实现了虚拟转发网络。 Kubernetes Porxy实现了以下功能： 转发访问Service的Service-IP的请求到Endpoints(即Pod-IP)。 监控Service和Endpoints的变化，实时刷新转发规则。 负载均衡能力。 Kubernetes Porxy是一种分布式L3代理转发， 默认是居于Iptables实现，这从设计上很值得借鉴，但是性能部分有待验证。 Kubernetes中的Ingress提供了一个统一的对外代理入口配置，比如HTTP的访问配置，然后通过实现Ingress-Controller Ingress-Controller的实现可以用Nginx,LVS等等，以Nginx来说，就Ingress-Controller监控Kubernetes API, 生成Nginx配置，然后加载生效，而Nginx跟Pod的通信，可以走Service，但是考虑到Kubernetes Porxy的性能问题，建议直接和Pod通信 下面就是Ingress Controller一个实现图： 整体来看的一个网络模型如下： 其中就包含物理层，网络虚拟层，代理层。 QAQ: 有这么多虚拟网络，覆盖网络，会不会有网络延迟？A: 网络虚拟会会带来性能损耗，比如Flannel需要将报文封装到UDP包中传输，这中间的封包解包就会带来损耗。所以网络虚拟化的部分，软件的实现还有待优化，其实更好的方式是硬件支持，比如现在很多提的SDN网络 Q: Pod为什么要有个网络容器A: 一方面这是解耦，通过网络容器来负责网络配置，这样对于业务容器来说稳定性会更高，比如有多个业务容器中，某一个业务容器断了，这样就不会导致网络中断。 Q ingress-controller实现除了使用LVS和Nginx外，能否采用商用负载设备来实现？实现是否取决于和k8s API的对接？A 可以啊，只要有接口都可以实现，通过实现Ingress-Controller，比如对接F5的硬件设备，只要F5支持相关的API。 Q ingress的流量默认是先走Service然后到Pod，还是直接到Pod？A 取决你的实现，官方的实现是先走Sevice再到Pod, 我们是直接到Pod Q 在某些应用场景下，pod的IP需要固定，而不是重启之后IP可能会变化，请问如何满足这种场景的需求？A Pod的Ip需要固定的话，一种方式是修改docker的代码，据我所知腾讯有实现过。另外的方案就是做L3的代理，给pod一个浮动IP,有点像Openstack的实现。 Q: Calico默认全网是打通的，怎么做基于网段之间的隔离？A: 目前来说这个如果要做网段隔离，可能偏向安全性比较高的场景，我们目前是做私有云场景，对隔离的要求没那么高。所以如果要做隔离的话，可以参考Openstack的OVS方案 Q: 你提到 kube-proxy 性能值得商榷，那么社区有好的替代方案吗？A: 我们目前的做法是直接Nginx和Pod通信，不走kube-proxy Q k8s 不同的namespaces网络是如何做隔离的，overlay flannel没有对应的网络策略，贵公司是如何做到的，关于k8s proxy性能问题在1.3版本之后得到了很大的改善这个有测试过吗？A : 目前k8s没有做隔离，只要知道IP都可以通信。Flannel的部分没有太多策略，如果要性能和定制化的需求，建议考虑OVS。 K8S PROXY的性能没有测试过。 Q: 代理入口上有哪些方法解决单点失效的问题呢？A: 这个比较传统了，软件实现就keepalived之类的 Q: kube proxy在通过iptables分发请求到各个endpoint的时候，跨主机的连接是否做了SNAT？如果做了SNAT，在高并发请求下，是否会存在源端口枯竭问题？有无这方面实践或者参考。谢谢。A: 跨主机通信还是走L3 over L2, 比如flannel，只是在机器上做Iptable的NAT。但是Iptable的规则数目有限，所以比较有顾虑。 Q: ingress-controller比较好的库都有哪些，分别基于nginx haproxy lvs的A: Github有蛮多实现的，其实还是比较简单的，像go语言的话，直接套用官方提供的demo即可，其他语言可以对接K8S的API实现。 Q: 这么多层的网络，多层转发后网络性能怎么样？有没有办法实现高速数据转发解决方案？A: 代理层，虚拟层都会有损耗，这个就是要考虑管理成本和性能的权衡了。如何要实现高性能的话，就是要往SDN网络研究，通过硬件层的支持来实现虚拟化。","categories":[{"name":"k8s","slug":"k8s","permalink":"http://dongkui.site/categories/k8s/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://dongkui.site/tags/docker/"},{"name":"k8s","slug":"k8s","permalink":"http://dongkui.site/tags/k8s/"},{"name":"network","slug":"network","permalink":"http://dongkui.site/tags/network/"}],"keywords":[{"name":"k8s","slug":"k8s","permalink":"http://dongkui.site/categories/k8s/"}]},{"title":"【翻译】docker 中拉取私库","slug":"trans-go_get_for_private_repos_in_docker","date":"2016-10-27T01:35:25.000Z","updated":"2017-12-27T09:15:49.000Z","comments":true,"path":"2016/10/27/trans-go_get_for_private_repos_in_docker/","link":"","permalink":"http://dongkui.site/2016/10/27/trans-go_get_for_private_repos_in_docker/","excerpt":"Ivan Daniluk 是一位我很崇敬的大牛。该文翻译自他的一篇博文。该文研究了 docker 中拉取 github 私有仓库时涉及的权限处理问题。涵盖 go 包管理、docker、ssh 等。","text":"Ivan Daniluk 是一位我很崇敬的大牛。该文翻译自他的一篇博文。该文研究了 docker 中拉取 github 私有仓库时涉及的权限处理问题。涵盖 go 包管理、docker、ssh 等。 博客 原文: divan’s blog 插入视频：GopherCon 2016: Ivan Danyliuk - Visualizing Concurrency in Go 虽然 go 社区在依赖管理方面一直朝着稳定、易于理解的模式和实践发展，但是依然有很多令人疑惑的地方。其中之一就发生在用容器进行涉及私有仓库依赖的自动可重复的构建的过程中。 当用 go get 时，Github 私库经常是疑惑的源头。但有个很容易的变通办法，只需要在 .gitconfig 中增加两行： 12[url &quot;git@github.com:&quot;] insteadOf = https://github.com/ 或者一行解决：1git config --global url.&quot;git@github.com:&quot;.insteadOf &quot;https://github.com/&quot; 当在容器中进行构建时，发生了最令人疑惑的事情。下面以当前最流行的容器 Docker 为例说明。 问题假设有两个包 github.com/company/foo 和 github.com/company/bar，foo 中导入了 bar。 12foo.go:import &quot;github.com/company/bar&quot; 正常的流程是：设置 GOPATH、SSH 密钥对、gitconfig 就好了，简单的命令 go get github.com/company/foo 能搞定一切，下载两个包。 123$ go get -v github.com/company/foogithub.com/company/foo (download)github.com/company/bar (download) 但是现在，我们想让这个构建过程在任何设备上可复现，甚至在一个 CI 实例上，故而选择在 Docker 容器中打包一切。可以用基于官方 golang 的 Dockerfile： Dockerfile1234FROM golang:1.6ADD . /go/src/github.com/company/fooCMD cd /go/src/github.com/company/foo; go get github.com/company/bar &amp;&amp; go build -o /go/bin/foo Build script12345docker build -t foo-build . # build imagedocker run --name=foo-build foo-build # compile binarydocker cp foo-build:/foo foo # copy binary to fsdocker rm -f foo-build # remove containerdocker rmi -f foo-build # remove image 这种方式不奏效，因为用于构建（foo-build）的 Docker 容器没有包含 bar 的依赖、ssh 密钥对以及合适的 gitconfig。而且很明显，简单地增加密钥对并不可行（it’s not trivial simply to add the keys），因为你必须处理以 SSH 为主的一大堆障碍。那，我们就尽快搞定吧。 解决办法ssh 与 https首先，构建（build）阶段（docker run ...）会遇到如下错误： 1234# cd .; git clone https://github.com/company/bar /go/src/github.com/company/barCloning into &apos;/go/src/github.com/company/bar&apos;...fatal: could not read Username for &apos;https://github.com&apos;: No such device or addresspackage github.com/company/bar: exit status 128 意思是：你 Github 的权限允许用 SSH 密钥，但 go get 援引的 git 命令试图通过 HTTPS 途径克隆仓库，而你却没有配置证书。 变通办法很简单，该问开始就有描述。我们只需要在 Dockerfile 中的 go get 前增加： 1RUN echo &quot;[url \\&quot;git@github.com:\\&quot;]\\n\\tinsteadOf = https://github.com/&quot; &gt;&gt; /root/.gitconfig 密钥下一个错误是主机 key 认证错误：12345678# cd .; git clone https://github.com/company/bar /go/src/github.com/company/barCloning into &apos;/go/src/github.com/company/bar&apos;...Host key verification failed.fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.package github.com/company/bar: exit status 128 这是因为我们的 Docker 容器还没有 SSH 密钥。the right approach is not trivial, 我们继续。 首先，我们想要每个开发者或者 CI 使用自己的私库的密钥。如果一个人有 foo 的权限，那么他肯定有 bar 的权限，密钥通常在 ~/.ssh/id_rsa 文件。 然而，不可以将密钥复制到容器。 Dockerfile 的 ADD 和 COPY 命令只能复制当前目录的文件，故而无法直接用 ADD ~/.ssh/ /root/ssh。解决办法之一是写 wrapper script 先把私钥复制到本地，再复制到容器。但这中方式仍然不安全，而且不优雅。 我们可以通过 docker 的 -v 命令行标志挂载数据卷。第一种办法就是简单粗暴地将整个 ~/.ssh 目录挂载，但很难 1docker run --name=foo-build -v ~/.ssh:/root/.ssh foo-build 该命令在 MacOS X 正常，但在 Linux 则不行。原因是 ~/.ssh/config 文件的所有权。 ssh 期望该文件与当前用户拥有相同的所有权。容器内部，用户是 root 权限，但挂载的目录一般是普通的 Linux 用户的权限，即 developer。容器内如下： 12$ ls ~/.ssh/config-rw-r--r-- 1 1000 1000 147 Jun 1 19:20 /root/.ssh/config 让 SSH 报错退出：1Bad owner or permissions on ~/.ssh/config The solution is to mount only the key and workaround host checking later. 1docker run --name=foo-build -v ~/.ssh/id_rsa:/root/.ssh/id_rsa foo-build 报错依然相同。但当带 -t 参数，返回如下： 1234$ docker run --name=foo-build -v ~/.ssh/id_rsa:/root/.ssh/id_rsa -t foo-buildThe authenticity of host &apos;github.com (192.30.252.128)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 当然，我们并不想手动与 SSH 实时交互。故而，我们需要找到一个强制执行的方式。有个称为 StrictHostChecking 的 SSH 客户端选项。 StrictHostChecking通常，你有按 ~/.ssh/known_hosts 命名的文件，里面有已知主机的信息，但在容器内却没有。所以我们需要用客户端选项弃用这些检测。最简单的方式是将该选项放入 ~/.ssh/config 文件（那个存在权限问题的文件）。 但是，我们只需要一个选项，故而在容器内直接创建该文件（create this file on the fly inside the container）是可行的。在 Dockerifle 内增加 1RUN mkdir /root/.ssh &amp;&amp; echo &quot;StrictHostKeyChecking no &quot; &gt; /root/.ssh/config 重新执行 docker run ，这次会成功。 总结最终的 Dockerfile： 123456FROM golang:1.6RUN echo &quot;[url \\&quot;git@github.com:\\&quot;]\\n\\tinsteadOf = https://github.com/&quot; &gt;&gt; /root/.gitconfigRUN mkdir /root/.ssh &amp;&amp; echo &quot;StrictHostKeyChecking no &quot; &gt; /root/.ssh/configADD . /go/src/github.com/company/fooCMD cd /go/src/github.com/company/foo &amp;&amp; go get github.com/company/bar &amp;&amp; go build -o /foo 构建步骤：12345docker build -t foo-build .docker run --name=foo-build -v ~/.ssh/id_rsa:/root/.ssh/id_rsa foo-builddocker cp foo-build:/foo foodocker rm -f foo-builddocker rmi -f foo-build 你可以将这些步骤加入 Makefile 或者定制构建脚本，在本地、CI 和其他任何地方安全使用。 SSH 私钥只有一次被复制到暂时的容器中用于构建，之后马上被移除。优雅安全的解决方式。","categories":[{"name":"docker","slug":"docker","permalink":"http://dongkui.site/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://dongkui.site/tags/docker/"},{"name":"ssh","slug":"ssh","permalink":"http://dongkui.site/tags/ssh/"},{"name":"translate","slug":"translate","permalink":"http://dongkui.site/tags/translate/"}],"keywords":[{"name":"docker","slug":"docker","permalink":"http://dongkui.site/categories/docker/"}]},{"title":"Read List","slug":"list-read","date":"2016-10-14T01:35:25.000Z","updated":"2017-12-27T09:13:18.000Z","comments":true,"path":"2016/10/14/list-read/","link":"","permalink":"http://dongkui.site/2016/10/14/list-read/","excerpt":"The list to read and related resources.","text":"The list to read and related resources. foundation Programming Language Foundations golang Go in Practice (ing: 2016.10-) The Way To Go- A Thorough Introduction To The Go Programming Language Web Development with Go build-web-application-with-golang-zh db MongoDB 权威指南 (ing) MongoDB in Action, 2nd Edition docker Docker in Action Docker in Practice linux Mastering Linux unix Advanced Programming in the UNIX Environment, 3rd Edition The Unix Programming Environment Beginning Unix netword TCPIP Illustrated, Volume 1, 2nd Edition SDN Software Defined Networks The Art of Network Architecture ssh SSH, The Secure Shell, 2nd Edition development process the_art_of_agile_development (ing: 2016.10-) Scrum in Action The Professional ScrumMaster’s Handbook The Nature of Software Development algorithm Lucida: 我的算法学习之路 inspiring blog1. Lucida’s blog :site address: lucida 程序员必读书单 1.0 本文把程序员所需掌握的关键知识总结为三大类19个关键概念，然后给出了掌握每个关键概念所需的入门书籍，必读书籍，以及延伸阅读。旨在成为最好最全面的程序员必读书单。","categories":[{"name":"resource","slug":"resource","permalink":"http://dongkui.site/categories/resource/"}],"tags":[{"name":"books","slug":"books","permalink":"http://dongkui.site/tags/books/"}],"keywords":[{"name":"resource","slug":"resource","permalink":"http://dongkui.site/categories/resource/"}]},{"title":"Hexo 构建静态博客","slug":"tools-hexo","date":"2016-07-26T01:56:01.000Z","updated":"2017-12-28T02:11:00.000Z","comments":true,"path":"2016/07/26/tools-hexo/","link":"","permalink":"http://dongkui.site/2016/07/26/tools-hexo/","excerpt":"Hexo 是个快速、简单且功能强大的 Node.js 博客框架。 A fast, simple &amp; powerful blog framework, powered by Node.js.","text":"Hexo 是个快速、简单且功能强大的 Node.js 博客框架。 A fast, simple &amp; powerful blog framework, powered by Node.js. 今天偶然看到一个名为杰风居的博客，喜欢那种风格，就意外发现了 Hexo。进而找到淡忘~浅思这篇博文《简洁轻便的博客平台: Hexo详解》。后来又发现了这篇hexo你的博客。兴奋之至，特此纪录。 Hexo官方文档安装由于 Hexo 是基于 Node，安装前要先安装 Node。安装 Hexo 要用全局安装：加 -g 参数 1npm install -g hexo hexo help : 查看帮助 使用安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后，指定文件夹的目录如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml网站的 配置 信息，可以在此配置大部分的参数。 scaffolds模版 文件夹。当新建文章时，Hexo 会根据 scaffold 来建立文件。 source资源文件夹是存放用户资源的地方。除 posts 文件夹之外，开头命名为 (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes主题 文件夹。Hexo 会根据主题来生成静态页面。 1hexo server # the same as: hexo s 这时，4000 端口打开。 配置目录和文件 scaffolds：模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径。新建文件的默认布局是post，可以在配置文件中更改布局。用draft布局生成的文件会被保存到 source/_drafts 文件夹。 source：资源文件夹是存放用户资源的地方。 source/_post：文件箱。（低版本的hexo还会存在一个_draft，这是草稿箱）除 posts 文件夹之外，开头命名为 (下划线)的文件/ 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去 themes：主题 文件夹。Hexo 会根据主题来生成静态页面。 themes/landscape：默认的皮肤文件夹 _config.yml：全局的配置文件，每次更改要重启服务。 低版本的Hexo还会生成scripts文件夹，里面用于保存扩展Hexo的脚本文件。 全局配置可以在_config.yml 中修改： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# Hexo Configuration## Docs: http://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site 站点配置title: Hexo-demo #网站标题subtitle: hexo is simple and easy to study #网站副标题description: this is hexo-demo #网栈描述author: pomy #你的名字language: zh-CN #网站使用的语言timezone: Asia/Shanghai #网站时区# URL #可以不用配置## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yoursite.com #网址，搜索时会在搜索引擎中显示root: / #网站根目录permalink: :year/:month/:day/:title/ #永久链接格式permalink_defaults: #永久链接中各部分的默认值# Directory 目录配置source_dir: source #资源文件夹，这个文件夹用来存放内容public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件tag_dir: tags #标签文件夹archive_dir: archives #归档文件夹category_dir: categories #分类文件夹code_dir: downloads/code #Include code 文件夹i18n_dir: :lang #国际化文件夹skip_render: #跳过指定文件的渲染，您可使用 glob 来配置路径# Writing 写作配置new_post_name: :title.md # 新文章的文件名称default_layout: post #默认布局titlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0 #把文件名称转换为 (1) 小写或 (2) 大写render_drafts: false #显示草稿post_asset_folder: false #是否启动资源文件夹relative_link: false #把链接改为与根目录的相对位址future: true highlight: #代码块的设置 enable: true line_number: true auto_detect: true tab_replace:# Category &amp; Tag 分类 &amp; 标签default_category: uncategorized #默认分类category_map: #分类别名 tag_map: #标签别名# Date / Time format 时间和日期## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination 分页## Set per_page to 0 to disable paginationper_page: 10 #每页显示的文章量 (0 = 关闭分页功能)pagination_dir: page #分页目录# Extensions 扩展## Plugins: http://hexo.io/plugins/ 插件## Themes: http://hexo.io/themes/ 主题theme: landscape #当前主题名称# Deployment #部署到github## Docs: http://hexo.io/docs/deployment.htmldeploy: type: 一般主题下有一个 languages 文件夹，用于对应 language 配置项。比如在 ejs 中有： 1&lt;%= __(&apos;tags&apos;) %&gt; language 的配置项是 zh-CN，则会在languages 文件夹下找到 zh-CN.yml 文件中对应的项来解释。 修改全局配置时，注意缩进，同时注意冒号后面要有一个空格。 主题配置主题的配置文件在/themes/主题文件夹/_config.yml，一般包括导航配置(menu)，内容配置(content)，评论插件，图片效果(fancybox)和边栏(sidebar)。 Hexo提高了大量的主题，可以在全局配置文件中更改主题： 1234# Extensions 扩展## Plugins: http://hexo.io/plugins/ 插件## Themes: http://hexo.io/themes/ 主题theme: 你的主题名称 主题的文件目录必须在 themes 目录下。Hexo主题更换教程 修改局部页面页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以modernist主题为例： 123456789101112131415161718.├── languages #多语言| ├── default.yml #默认语言| └── zh-CN.yml #中文语言├── layout #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制| ├── _partial #局部的布局，此目录下的*.ejs是对头尾等局部的控制| └── _widget #小挂件的布局，页面下方小挂件的控制├── source #源码| ├── css #css源码 | | ├── _base #*.styl基础css| | ├── _partial #*.styl局部css| | ├── fonts #字体| | ├── images #图片| | └── style.styl #*.styl引入需要的css源码| ├── fancybox #fancybox效果源码| └── js #javascript源代码├── _config.yml #主题配置文件└── README.md #用GitHub的都知道 如果你需要修改头部，直接修改hexo\\themes\\modernist\\layout_partial\\header.ejs，比如头上加个搜索框： 123456&lt;div&gt;&lt;form class=&quot;search&quot; action=&quot;//google.com/search&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt; &lt;input type=&quot;search&quot; name=&quot;q&quot; id=&quot;search&quot; autocomplete=&quot;off&quot; autocorrect=&quot;off&quot; autocapitalize=&quot;off&quot; maxlength=&quot;20&quot; placeholder=&quot;Search&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;site:&lt;%- config.url.replace(/^https?:\\/\\//, &apos;&apos;) %&gt;&quot;&gt;&lt;/form&gt;&lt;/div&gt; 将如上代码加入即可，您需要修改css以便这个搜索框比较美观。 再如，你要修改页脚版权信息，直接编辑hexo\\themes\\modernist\\layout_partial\\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。 评论框静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用多说。直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在 modernist_config.yml 中配置 duoshuo_shortname 为多说的基本设置-&gt;域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以参考这里，我是在HeroicYang的基础上修改的。 如果你是有的其他第三方评论系统，将通用代码粘贴到 hexo\\themes\\modernist\\layout\\_partial\\comment.ejs 里面，如下： 1234&lt;% if (config.disqus_shortname &amp;&amp; page.comments)&#123; %&gt;&lt;section id=&quot;comment&quot;&gt; #你的通用代码&lt;% &#125; %&gt; 基本使用写文章通过new命令新建一篇文章：执行new命令，生成指定名称的文章至hexo\\source\\_posts\\postName.md。 1hexo new [layout] &quot;postName&quot; #新建文章 123$ hexo new [layout] &lt;title&gt;//same ashexo n 其中layout是可选参数，默认值为post。 如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，需用引号括起来。 Hexo提供的layout在scaffolds目录下，也可以在此目录下自建layout文件。新建的文件则会保存到source/_post目录下。 发表的文章会全部显示，如果文章很长，就只要显示文章的摘要就行了。在需要显示摘要的地方添加如下代码即可： 123以上是摘要&lt;!--more--&gt;以下是余下全文 部署在部署之前，需要通过命令把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的： 123hexo generate//same ashexo g 在本地目录下，会生成一个public的目录，里面包括了所有静态化的文件。 生成静态文件之后，如果要发布到github，还需要配置deploy指令。在全局的配置文件中找到deploy： 123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/dongkui0712/dongkui0712.github.io.git branch: hexo 然后还要安装hexo-deployer-git： 1npm install hexo-deployer-git -S 最后利用hexo指令发布到github： 123hexo d//same ashexo deploy 总结Hexo常用命令： 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 参考 Hexo 主题Light修改教程 hexo你的博客 《简洁轻便的博客平台: Hexo详解》","categories":[{"name":"util","slug":"util","permalink":"http://dongkui.site/categories/util/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://dongkui.site/tags/hexo/"}],"keywords":[{"name":"util","slug":"util","permalink":"http://dongkui.site/categories/util/"}]},{"title":"Docker compose note (ing)","slug":"docker-compose","date":"2016-07-25T15:35:25.000Z","updated":"2017-12-27T09:12:23.000Z","comments":true,"path":"2016/07/25/docker-compose/","link":"","permalink":"http://dongkui.site/2016/07/25/docker-compose/","excerpt":"Docker Compose 是定义、构建多容器的 docker 应用的工具。Compose 通过 compose 文件配置应用的服务。之后，用一条指令就可以从配置创建、启动所有服务。","text":"Docker Compose 是定义、构建多容器的 docker 应用的工具。Compose 通过 compose 文件配置应用的服务。之后，用一条指令就可以从配置创建、启动所有服务。 和 CI 工作流程搭配，Compose 在开发、测试、模拟环境下非常给力。更多内容参见 Common Use Cases.。 使用 Compose 基于一下三步： 用 Dockerfile 定义应用的环境（以在任何环境下都能重现） 在 docker-compose.yml 中定义组成应用的服务（services）（以让所有服务能在孤立的环境一起运行） 最后，运行 docker-compose up ，Compose 会启动，接着运行整个应用。 原文地址 docker-compose.yml 格式如下： 123456789101112131415version: '2'services: web: build: . ports: - \"5000:5000\" volumes: - .:/code - logvolume01:/var/log links: - redis redis: image: redisvolumes: logvolume01: &#123;&#125; Compose 文件详情参见：Compose file reference Compose 有管理应用的整个生命周期的指令： Start, stop and rebuild services View the status of running services Stream the log output of running services Run a one-off command on a service 特性（Features） Multiple isolated environments on a single host Preserve volume data when containers are created Only recreate containers that have changed Variables and moving a composition between environments Common Use Cases几种常见用例如下： 开发环境开发软件时，在隔离的环境下运行应用和进行交互的能力至关重要。Compose 指令工具可用来创建这种环境并与其交互。 Compose file 提供归档（document）并配置应用的所有服务的依赖（数据库，队列，缓存，web服务API 等等）。使用 Compose 指令工具可以用单独的一行指令（docker-compose up）为每个依赖创建并启动一个或多个容器。 总之，这些特性为开发者提供一条开始开发项目的便捷途径。 自动化测试环境任何持续部署或者集成过程的重要一部分是自动测试组件。自动化的端到端测试要求一个运行测试的环境。Compose 为测试组件提供一个方便地创建、销毁隔离地测试环境的途径。通过在 Compose file 中定义整个环境，可用几行指令就创建、销毁这些环境。 123$ docker-compose up -d$ ./run_tests$ docker-compose down 单一主机的部署传统地，将 Compose 定位为部署、测试工作流，但每个发布版都展现出更多的生产导向性。可以用 Compose 部署到一个远程 Docker 引擎。该 Docker 引擎可能是一个由 Docker Machine 预分配的单独实例，也可能是整个 Docker Swarm 集群。 更多生产导向性特性，见 compose in production 安装 Compose) 安装 Docker github 上 Compose repository 发行版页面 安装命令： -L-s`-`uname -m` > /usr/local/bin/docker-compose```124. 为二进制文件添加执行权限：``` $ chmod +x /usr/local/bin/docker-compose 检测安装 12$ docker-compose --versiondocker-compose version: 1.7.1 Alternative install optionsInstall using pipCompose can be installed from pypi using pip. If you install using pip it is highly recommended that you use a virtualenv because many operating systems have python system packages that conflict with docker-compose dependencies. See the virtualenv tutorial to get started. 1$ pip install docker-compose Note: pip version 6.0 or greater is required Install as a containerCompose can also be run inside a container, from a small bash script wrapper. To install compose as a container run: 12$ curl -L https://github.com/docker/compose/releases/download/1.7.1/run.sh &gt; /usr/local/bin/docker-compose$ chmod +x /usr/local/bin/docker-compose Master buildsIf you’re interested in trying out a pre-release build you can download a binary from https://dl.bintray.com/docker-compose/master/. Pre-release builds allow you to try out new features before they are released, but may be less stable. UpgradingIf you’re upgrading from Compose 1.2 or earlier, you’ll need to remove or migrate your existing containers after upgrading Compose. This is because, as of version 1.3, Compose uses Docker labels to keep track of containers, and so they need to be recreated with labels added. If Compose detects containers that were created without labels, it will refuse to run so that you don’t end up with two sets of them. If you want to keep using your existing containers (for example, because they have data volumes you want to preserve) you can use compose 1.5.x to migrate them with the following command: $ docker-compose migrate-to-labels Alternatively, if you’re not worried about keeping them, you can remove them. Compose will just create new ones. $ docker rm -f -v myapp_web_1 myapp_db_1 ... UninstallationTo uninstall Docker Compose if you installed using curl: $ rm /usr/local/bin/docker-compose To uninstall Docker Compose if you installed using pip: $ pip uninstall docker-compose Note: If you get a “Permission denied” error using either of the above methods, you probably do not have the proper permissions to remove docker-compose. To force the removal, prepend sudo to either of the above commands and run again. Getting StartedGet started with DjangoGet started with RailsGet started with WordPressFrequently asked questionsCommand line referenceCompose file referenceEnvironment file","categories":[{"name":"docker","slug":"docker","permalink":"http://dongkui.site/categories/docker/"}],"tags":[{"name":"doker","slug":"doker","permalink":"http://dongkui.site/tags/doker/"},{"name":"compose","slug":"compose","permalink":"http://dongkui.site/tags/compose/"}],"keywords":[{"name":"docker","slug":"docker","permalink":"http://dongkui.site/categories/docker/"}]}]}